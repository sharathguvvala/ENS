import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { ethers } from "ethers";
import { useState } from "react";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import { useAccount, useProvider, useSigner, useContract } from "wagmi";
import { ContractABI } from "../constants/index";

export default function Home() {
  const { isConnected } = useAccount();
  const provider = useProvider();
  const { data: signer } = useSigner();
  const [domain, setDomain] = useState("");
  const [record, setRecord] = useState("");
  const contract = useContract({
    addressOrName: "0xe0242726aBAE75D4E9755Bd1D90E6b2969cFF5c6",
    contractInterface: ContractABI,
    signerOrProvider: signer,
  });

  const mintDomain = async () => {
    if (!domain) {
      return;
    }
    if (domain.length < 3) {
      alert("Domain must be at least 3 characters long");
      return;
    }
    const price = domain.length === 3 ? "0.05" : "0.1";
    console.log("Minting domain", domain, "with price", price);
    try {
      if (isConnected) {
        let tx = await contract.register(domain, {
          value: ethers.utils.parseEther(price),
        });
        const receipt = await tx.wait();
        if (receipt.status === 1) {
          console.log(
            "Domain minted! https://mumbai.polygonscan.com/tx/" + tx.hash
          );
          tx = await contract.setRecord(domain, record);
          await tx.wait();
          console.log(
            "Record set! https://mumbai.polygonscan.com/tx/" + tx.hash
          );
          setRecord("");
          setDomain("");
        } else {
          alert("Transaction failed! Please try again");
        }
      }
    } catch (error) {
      console.log(error);
    }
  };

  const renderInputForm = () => {
    return (
      <div>
        <div>
          <input
            type="text"
            value={domain}
            placeholder="domain.stacex"
            onChange={(e) => setDomain(e.target.value)}
          />
        </div>
        <input
          type="text"
          value={record}
          placeholder="whats ur ninja power?"
          onChange={(e) => setRecord(e.target.value)}
        />
        <div>
          <button onClick={mintDomain}>
            Mint
          </button>
        </div>
      </div>
    );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>ENS</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        {isConnected && renderInputForm()}
      </main>

      <footer></footer>
    </div>
  );
}
